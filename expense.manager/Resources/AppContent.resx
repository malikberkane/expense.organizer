<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutPageTitle" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AddCategoryPageTitle" xml:space="preserve">
    <value>Add category</value>
  </data>
  <data name="AddExpenseConfirmation" xml:space="preserve">
    <value>Would you like to add the current expense?</value>
  </data>
  <data name="AddExpensePageTitle" xml:space="preserve">
    <value>Add expense</value>
  </data>
  <data name="AddTagsLabel" xml:space="preserve">
    <value>Add tags to expense</value>
  </data>
  <data name="Alert" xml:space="preserve">
    <value>Alert</value>
  </data>
  <data name="AmountPlaceholder" xml:space="preserve">
    <value>Enter amount</value>
  </data>
  <data name="Bars" xml:space="preserve">
    <value>Bars</value>
  </data>
  <data name="Bills" xml:space="preserve">
    <value>Bills</value>
  </data>
  <data name="Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="ByCategTabTitle" xml:space="preserve">
    <value>By categories</value>
  </data>
  <data name="ByDateTabTitle" xml:space="preserve">
    <value>By date</value>
  </data>
  <data name="ByTagTabTitle" xml:space="preserve">
    <value>By tag</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelExpenseConfirmation" xml:space="preserve">
    <value>Would you like to cancel the current expense?</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CategoryLabelPlaceholder" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="CurrencyChoicePageTitle" xml:space="preserve">
    <value>Currency choice</value>
  </data>
  <data name="CurrentMonthLabel" xml:space="preserve">
    <value>Current month:</value>
  </data>
  <data name="DateLabel" xml:space="preserve">
    <value>Date:</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteCategoryConfirmation" xml:space="preserve">
    <value>Would you like to delete this category? All linked expenses will be also deleted.</value>
  </data>
  <data name="DeleteCategoryDialog" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteExpenseConfirmation" xml:space="preserve">
    <value>Would you like to delete this expense?</value>
  </data>
  <data name="DeleteTagConfirmation" xml:space="preserve">
    <value>Would you like to delete this tag?</value>
  </data>
  <data name="DetailsLabel" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Developer" xml:space="preserve">
    <value>Developer:</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditCategoryDialog" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditExpenseDialog" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EnterTagNamePrompt" xml:space="preserve">
    <value>Choose tag name</value>
  </data>
  <data name="Entertainment" xml:space="preserve">
    <value>Entertainment</value>
  </data>
  <data name="Expense" xml:space="preserve">
    <value>Expense</value>
  </data>
  <data name="ExpenseLabelPlaceholder" xml:space="preserve">
    <value>Enter label</value>
  </data>
  <data name="FileSaveLocation" xml:space="preserve">
    <value>The file was saved in the following folder:</value>
  </data>
  <data name="Food" xml:space="preserve">
    <value>Food</value>
  </data>
  <data name="Gifts" xml:space="preserve">
    <value>Gifts</value>
  </data>
  <data name="GoToSourceCode" xml:space="preserve">
    <value>Go to source code on github</value>
  </data>
  <data name="Grossery" xml:space="preserve">
    <value>Grossery</value>
  </data>
  <data name="Housing" xml:space="preserve">
    <value>Housing</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="InvalidItemAlert" xml:space="preserve">
    <value>Label and amount are mandatory.</value>
  </data>
  <data name="LoadPrevious" xml:space="preserve">
    <value>Load previous</value>
  </data>
  <data name="MonthlyRecurringBudgetLabel" xml:space="preserve">
    <value>Monthly recurring budget</value>
  </data>
  <data name="Movies" xml:space="preserve">
    <value>Movies</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NoCategoriesAlert" xml:space="preserve">
    <value>There are no existing categories. You should create categories first.</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="NoTagsLinked" xml:space="preserve">
    <value>No tags linked.</value>
  </data>
  <data name="OfBudget" xml:space="preserve">
    <value>of budget</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="ParentCategoryLabel" xml:space="preserve">
    <value>Parent category:</value>
  </data>
  <data name="Ponctual" xml:space="preserve">
    <value>Ponctual</value>
  </data>
  <data name="Recurring" xml:space="preserve">
    <value>Recurring</value>
  </data>
  <data name="RemoveTagPrompt" xml:space="preserve">
    <value>Remove tag from list?</value>
  </data>
  <data name="Restaurant" xml:space="preserve">
    <value>Restaurant</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="SelectParentPageTitle" xml:space="preserve">
    <value>Parent category</value>
  </data>
  <data name="SendCsvBackup" xml:space="preserve">
    <value>Backup expenses in csv file</value>
  </data>
  <data name="SettingsPageTitle" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Share" xml:space="preserve">
    <value>Share</value>
  </data>
  <data name="ShareCsvPrompt" xml:space="preserve">
    <value>Would you like to share the csv?</value>
  </data>
  <data name="SpecificBudgetNote" xml:space="preserve">
    <value>This is the specified budget in a previous month. Enter new amount if you would like to modify it.</value>
  </data>
  <data name="SpecifiedBudgetLabel" xml:space="preserve">
    <value>Specified budget in</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value />
  </data>
  <data name="TagChoicePageTitle" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="TagRecapPageTitle" xml:space="preserve">
    <value>Tags recap</value>
  </data>
  <data name="TagsLabel" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="Trips" xml:space="preserve">
    <value>Trips</value>
  </data>
  <data name="Untag" xml:space="preserve">
    <value>Untag</value>
  </data>
  <data name="UntagExpenseConfirmation" xml:space="preserve">
    <value>Would you like to untag this expense?</value>
  </data>
  <data name="UntagExpenseDialog" xml:space="preserve">
    <value>Untag</value>
  </data>
  <data name="UpdateCategoryPageTitle" xml:space="preserve">
    <value>Update category</value>
  </data>
  <data name="UpdateExpensePageTitle" xml:space="preserve">
    <value>Update expense</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>